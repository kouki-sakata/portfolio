import com.github.gradle.node.npm.task.NpmTask

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.owasp.dependencycheck' version '8.4.0'
    id 'org.sonarqube' version '4.4.1.3373'
    id 'com.github.node-gradle.node' version '7.1.0'
    id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.4'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.4'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

node {
	download = true
	version = '20.19.0'
	npmVersion = '10.8.3'
	nodeProjectDir = file("${project.projectDir}/frontend")
	npmInstallCommand = 'ci'
}

final def frontendDir = file("${project.projectDir}/frontend")

tasks.named('npmInstall', NpmTask) {
	description = 'Install frontend dependencies'
	group = 'frontend'
	workingDir = frontendDir
	args = ['ci']
	inputs.files(
		file("${frontendDir}/package.json"),
		file("${frontendDir}/package-lock.json")
	)
	outputs.dir(file("${frontendDir}/node_modules"))
}

tasks.register('npmLint', NpmTask) {
	description = 'Run frontend lint checks'
	group = 'verification'
	dependsOn 'npmInstall'
	workingDir = frontendDir
	args = ['run', 'lint']
	environment = [CI: 'true']
	inputs.dir(file("${frontendDir}/src"))
	outputs.upToDateWhen { false }
}

tasks.register('npmTypecheck', NpmTask) {
	description = 'Run TypeScript type checks'
	group = 'verification'
	dependsOn 'npmInstall'
	workingDir = frontendDir
	args = ['run', 'typecheck']
	environment = [CI: 'true']
	inputs.dir(file("${frontendDir}/src"))
	outputs.upToDateWhen { false }
}

tasks.register('npmTest', NpmTask) {
	description = 'Run frontend unit tests'
	group = 'verification'
	dependsOn 'npmInstall'
	workingDir = frontendDir
	args = ['run', 'test']
	environment = [CI: 'true']
	inputs.dir(file("${frontendDir}/src"))
	outputs.upToDateWhen { false }
}

tasks.register('npmBuild', NpmTask) {
	description = 'Build frontend assets'
	group = 'build'
	dependsOn 'npmInstall'
	workingDir = frontendDir
	args = ['run', 'build']
	environment = [CI: 'true']
	inputs.dir(file("${frontendDir}/src"))
	inputs.files(
		file("${frontendDir}/package.json"),
		file("${frontendDir}/package-lock.json"),
		file("${frontendDir}/tsconfig.app.json"),
		file("${frontendDir}/tsconfig.node.json"),
		file("${frontendDir}/tsconfig.vitest.json"),
		file("${frontendDir}/vite.config.ts")
	)
	outputs.dir(file("${frontendDir}/dist"))
}

tasks.named('processResources') {
	dependsOn 'npmBuild'
	from("${frontendDir}/dist") {
		into 'static'
	}
}

tasks.named('check') {
	dependsOn 'npmLint'
	dependsOn 'npmTypecheck'
	dependsOn 'npmTest'
}

tasks.named('clean') {
	delete file("${frontendDir}/dist")
}

tasks.named('test') {
    useJUnitPlatform()
}

// Dedicated API test task (runs only tests tagged with 'api')
tasks.register('apiTest', Test) {
    description = 'Run API-focused tests (@Tag("api")).'
    group = 'verification'
    useJUnitPlatform {
        includeTags 'api'
    }
    // Keep JVM arg parity with other Test tasks
    jvmArgs '--enable-native-access=ALL-UNNAMED'
    shouldRunAfter tasks.named('test')
}

// Jacoco coverage reports
jacoco {
    toolVersion = '0.8.12'
}

tasks.register('jacocoApiTestReport', JacocoReport) {
    dependsOn tasks.named('apiTest')
    executionData fileTree(dir: project.buildDir, includes: [
        'jacoco/test.exec',
        'jacoco/apiTest.exec',
        'jacoco/*.exec'
    ])
    sourceDirectories.setFrom files(sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(sourceSets.main.output)
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

tasks.named('jacocoTestReport', JacocoReport) {
    dependsOn tasks.named('test')
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

// Optional coverage gate (kept detached from 'check' to avoid sudden pipeline failures)
tasks.register('jacocoCoverageVerification', JacocoCoverageVerification) {
    dependsOn tasks.named('test')
    violationRules {
        rule {
            element = 'BUNDLE'
            limits {
                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 0.25
                }
            }
        }
    }
}

// Optionally include coverage in the verification lifecycle
tasks.named('check') {
    dependsOn 'jacocoTestReport'
}

tasks.named('bootRun') {
	jvmArgs '--enable-native-access=ALL-UNNAMED'
}

tasks.withType(JavaExec) {
	jvmArgs '--enable-native-access=ALL-UNNAMED'
}

tasks.withType(Test) {
	jvmArgs '--enable-native-access=ALL-UNNAMED'
}

if (project.hasProperty('bootRun')) {
	bootRun {
		jvmArgs '--enable-native-access=ALL-UNNAMED'
	}
}

// OWASP Dependency Check設定
dependencyCheck {
	formats = ['HTML', 'JSON', 'XML']
	outputDirectory = 'build/reports/dependency-check'
	suppressionFile = 'dependency-check-suppressions.xml'
	failBuildOnCVSS = 7.0
}

// SonarQube設定
sonar {
	properties {
		property 'sonar.projectName', 'TeamDevelop'
		property 'sonar.projectKey', 'teamdev'
		property 'sonar.java.source', '21'
		property 'sonar.gradle.skipCompile', 'true'
		property 'sonar.coverage.exclusions', [
			'**/config/**',
			'**/constant/**',
			'**/dto/**',
			'**/entity/**',
			'**/form/**',
			'**/exception/**',
			'**/TeamDevelopApplication.java'
		].join(',')
		property 'sonar.exclusions', [
			'src/main/resources/**',
			'build/**',
			'gradle/**'
		].join(',')
	}
}
