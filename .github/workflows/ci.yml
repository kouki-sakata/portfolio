name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  checks: write
  pull-requests: write

env:
  JAVA_VERSION: '21'
  GRADLE_VERSION: '8.14.2'

jobs:
  test:
    name: Unit Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: teamdev_test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U test_user -d teamdev_test_db"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Run frontend lint
        working-directory: frontend
        run: npm run lint

      - name: Run frontend tests
        working-directory: frontend
        run: npm run test

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Wait for PostgreSQL to be ready
        env:
          PGPASSWORD: test_password
        run: |
          for i in {1..30}; do
            if pg_isready -h 127.0.0.1 -p 5432 -d teamdev_test_db -U test_user; then
              echo "PostgreSQL is ready"
              break
            fi
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Set up test database
        env:
          PGPASSWORD: test_password
        run: |
          psql -h 127.0.0.1 -p 5432 -U test_user -d teamdev_test_db -f src/main/resources/01_schema.sql
          psql -h 127.0.0.1 -p 5432 -U test_user -d teamdev_test_db -f src/main/resources/02_data.sql

      - name: Run unit tests
        run: ./gradlew test
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_NAME: teamdev_test_db
          DB_USERNAME: test_user
          DB_PASSWORD: test_password
          LOG_LEVEL_ROOT: WARN
          SPRING_PROFILES_ACTIVE: test

      - name: Run API tests (tagged)
        run: ./gradlew apiTest
        env:
          SPRING_PROFILES_ACTIVE: test

      - name: Generate coverage reports
        run: ./gradlew jacocoTestReport jacocoApiTestReport

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            build/reports/jacoco/test/html/
            build/reports/jacoco/jacocoApiTestReport/html/

      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: JUnit Test Results
          path: |
            build/test-results/test/*.xml
            build/test-results/apiTest/*.xml
          reporter: java-junit

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            build/test-results/test/
            build/test-results/apiTest/

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: |
            build/reports/tests/test/
            build/reports/tests/apiTest/

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jar-artifacts
          path: build/libs/*.jar

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run OWASP Dependency Check
        run: |
          ./gradlew dependencyCheckAnalyze || true

  contract-test:
    name: Contract Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'contract-test'))

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run OpenAPI contract tests
        run: ./gradlew contractTest -PenableOpenApiContract --no-daemon
        env:
          SPRING_PROFILES_ACTIVE: test

      - name: Upload contract test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: contract-test-reports
          path: |
            build/reports/tests/contractTest/
            build/openapi.json

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: build/reports/

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [ test, build ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: teamdev:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Docker イメージのセキュリティスキャン
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $(pwd):/tmp/.dive \
            wagoodman/dive:latest teamdev:test --ci

      - name: Run container smoke test
        run: |
          # コンテナの基本的な動作確認
          docker run -d --name test-app \
            -e DB_HOST=localhost \
            -e DB_PORT=3306 \
            -e DB_NAME=test_db \
            -e DB_USERNAME=test \
            -e DB_PASSWORD=test \
            teamdev:test
          
          # ヘルスチェック（30秒待機）
          timeout=30
          while [ $timeout -gt 0 ]; do
            if docker exec test-app wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health 2>/dev/null; then
              echo "Application is healthy"
              break
            fi
            echo "Waiting for application to start..."
            sleep 2
            timeout=$((timeout-2))
          done
          
          # コンテナ停止とクリーンアップ
          docker stop test-app
          docker rm test-app

  e2e:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    needs: [ build ]

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: teamdev_test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U test_user -d teamdev_test_db"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Download build artifacts (jar)
        uses: actions/download-artifact@v4
        with:
          name: jar-artifacts
          path: build/libs/

      - name: Install Playwright browsers
        uses: microsoft/playwright-github-action@v1

      - name: Start backend API
        env:
          SPRING_PROFILES_ACTIVE: test
          SPRING_DATASOURCE_URL: jdbc:postgresql://127.0.0.1:5432/teamdev_test_db
          SPRING_DATASOURCE_USERNAME: test_user
          SPRING_DATASOURCE_PASSWORD: test_password
          LOG_LEVEL_ROOT: WARN
        run: |
          nohup bash -c 'java -jar build/libs/*.jar' > backend.log 2>&1 &
          for i in {1..60}; do
            if curl -sf http://127.0.0.1:8080/actuator/health >/dev/null; then
              echo "Backend is up"; break; fi
            echo "Waiting for backend..."; sleep 2;
          done
          test $i -lt 60

      - name: Run Playwright E2E tests
        working-directory: frontend
        env:
          E2E_BASE_URL: http://localhost:5173
          E2E_SKIP_WEB_SERVER: 'false'
        run: npm run test:e2e

      - name: Upload Playwright reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-playwright-report
          path: |
            frontend/playwright-report/
            frontend/test-results/

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # SonarCloudの分析に必要

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run SonarCloud analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          if [ -n "$SONAR_TOKEN" ]; then
            ./gradlew sonar \
              -Dsonar.projectKey=teamdev \
              -Dsonar.organization=your-org \
              -Dsonar.host.url=https://sonarcloud.io
          else
            echo "SONAR_TOKEN not set, skipping SonarCloud analysis"
          fi

  deployment-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [ test, build, security-scan, docker-build ]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    environment:
      name: staging
      url: https://staging.teamdev.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: jar-artifacts
          path: build/libs/

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # ここに実際のデプロイメント処理を実装
          # 例: kubectl apply, docker compose up, etc.

      - name: Run integration tests
        run: |
          echo "Running integration tests against staging..."
          # ここに統合テストの実行処理を実装

      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            Staging deployment ${{ job.status }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}

  deployment-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [ test, build, security-scan, docker-build ]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: production
      url: https://teamdev.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: jar-artifacts
          path: build/libs/

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # ここに実際のプロダクションデプロイメント処理を実装

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against production..."
          # ここに本番環境でのスモークテストを実装

      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            Production deployment ${{ job.status }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
