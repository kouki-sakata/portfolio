name: Release Pipeline

on:
  push:
    tags:
      - 'v*.*.*'

env:
  JAVA_VERSION: '21'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git commits since last tag
        if [ -z "$(git tag --list --sort=-version:refname | head -n 2 | tail -n 1)" ]; then
          # First release
          CHANGELOG=$(git log --pretty=format:"- %s" --no-merges)
        else
          # Get commits since last tag
          LAST_TAG=$(git tag --list --sort=-version:refname | head -n 2 | tail -n 1)
          CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s" --no-merges)
        fi
        
        # Save changelog to file
        echo "## Changes in ${{ steps.get_version.outputs.VERSION }}" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "$CHANGELOG" >> CHANGELOG.md

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.get_version.outputs.VERSION }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false

  build-and-test:
    name: Build and Test for Release
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: teamdev_test_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'eclipse-temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Wait for MySQL
      run: |
        for i in {1..30}; do
          if mysqladmin ping -h 127.0.0.1 -P 3306 -u root -ptest_password --silent; then
            break
          fi
          sleep 2
        done

    - name: Set up test database
      run: |
        mysql -h 127.0.0.1 -P 3306 -u root -ptest_password -e "CREATE DATABASE IF NOT EXISTS teamdev_test_db;"
        mysql -h 127.0.0.1 -P 3306 -u root -ptest_password teamdev_test_db < src/main/resources/01_schema.sql

    - name: Run tests
      run: ./gradlew test
      env:
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_NAME: teamdev_test_db
        DB_USERNAME: root
        DB_PASSWORD: test_password
        SPRING_PROFILES_ACTIVE: test

    - name: Build JAR
      run: ./gradlew bootJar

    - name: Upload JAR to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: build/libs/TeamDevelopBravo-0.0.1-SNAPSHOT.jar
        asset_name: teamdev-${{ github.ref_name }}.jar
        asset_content_type: application/java-archive

  build-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [create-release, build-and-test]

    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan for Release
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'eclipse-temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Run OWASP Dependency Check
      run: ./gradlew dependencyCheckAnalyze
      env:
        NVD_API_KEY: ${{ secrets.NVD_API_KEY }}

    - name: Upload security scan results to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: build/reports/dependency-check/dependency-check-report.html
        asset_name: security-report-${{ github.ref_name }}.html
        asset_content_type: text/html

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [create-release, build-and-test, build-docker, security-scan]
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, 'alpha') && !contains(github.ref, 'beta')

    environment:
      name: production
      url: https://teamdev.example.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying version ${{ github.ref_name }} to production..."
        # 実際のデプロイメント処理をここに実装
        # 例: kubectl set image, docker-compose pull && docker-compose up -d

    - name: Run post-deployment tests
      run: |
        echo "Running post-deployment verification..."
        # ヘルスチェックやスモークテストを実行

    - name: Notify teams
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#releases'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: |
          🚀 Production Release ${{ job.status }}
          Version: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          URL: https://teamdev.example.com

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure()

    steps:
    - name: Rollback deployment
      run: |
        echo "Rolling back deployment due to failure..."
        # ロールバック処理を実装

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: 'warning'
        channel: '#releases'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: |
          ⚠️ Rollback Initiated
          Failed Version: ${{ github.ref_name }}
          Reason: Deployment verification failed