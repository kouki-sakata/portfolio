// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { CreateEmployeeData, CreateEmployeeErrors, CreateEmployeeResponses, CreateNewsData, CreateNewsErrors, CreateNewsResponses, DeleteEmployeesData, DeleteEmployeesResponses, DeleteNewsData, DeleteNewsErrors, DeleteNewsResponses, DeleteStampData, DeleteStampErrors, DeleteStampResponses, GetAllNewsData, GetAllNewsErrors, GetAllNewsResponses, GetHomeOverviewData, GetHomeOverviewErrors, GetHomeOverviewResponses, GetPublishedNewsData, GetPublishedNewsResponses, GetSessionData, GetSessionResponses, GetStampHistoryData, GetStampHistoryErrors, GetStampHistoryResponses, ListEmployeesData, ListEmployeesResponses, LoginData, LoginErrors, LoginResponses, LogoutData, LogoutResponses, StampData, StampErrors, StampResponses, ToggleNewsPublishData, ToggleNewsPublishErrors, ToggleNewsPublishResponses, UpdateEmployeeData, UpdateEmployeeErrors, UpdateEmployeeResponses, UpdateNewsData, UpdateNewsErrors, UpdateNewsResponses, UpdateStampData, UpdateStampErrors, UpdateStampResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * ログイン
 * メールとパスワードでログインし、セッションを開始します
 */
export const login = <ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) => {
    return (options.client ?? client).post<LoginResponses, LoginErrors, ThrowOnError>({
        url: '/api/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ログアウト
 * セッションを終了します
 */
export const logout = <ThrowOnError extends boolean = false>(options?: Options<LogoutData, ThrowOnError>) => {
    return (options?.client ?? client).post<LogoutResponses, unknown, ThrowOnError>({
        url: '/api/auth/logout',
        ...options
    });
};

/**
 * セッション状態取得
 * 現在の認証状態と従業員概要を返します
 */
export const getSession = <ThrowOnError extends boolean = false>(options?: Options<GetSessionData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSessionResponses, unknown, ThrowOnError>({
        url: '/api/auth/session',
        ...options
    });
};

/**
 * 従業員削除
 * 複数IDに対応（ADMIN権限が必要）
 */
export const deleteEmployees = <ThrowOnError extends boolean = false>(options: Options<DeleteEmployeesData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteEmployeesResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'SESSION',
                type: 'apiKey'
            }
        ],
        url: '/api/employees',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 従業員一覧
 * 管理者のみ絞り込み可能（adminOnly=true）
 */
export const listEmployees = <ThrowOnError extends boolean = false>(options?: Options<ListEmployeesData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListEmployeesResponses, unknown, ThrowOnError>({
        url: '/api/employees',
        ...options
    });
};

/**
 * 従業員作成
 * 新規ユーザーを作成（ADMIN権限が必要）
 */
export const createEmployee = <ThrowOnError extends boolean = false>(options: Options<CreateEmployeeData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateEmployeeResponses, CreateEmployeeErrors, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'SESSION',
                type: 'apiKey'
            }
        ],
        url: '/api/employees',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 従業員更新
 * 既存ユーザーを更新（ADMIN権限が必要）
 */
export const updateEmployee = <ThrowOnError extends boolean = false>(options: Options<UpdateEmployeeData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateEmployeeResponses, UpdateEmployeeErrors, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'SESSION',
                type: 'apiKey'
            }
        ],
        url: '/api/employees/{employeeId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * ホーム概要
 * ログイン中の従業員情報とお知らせ一覧を返却
 */
export const getHomeOverview = <ThrowOnError extends boolean = false>(options?: Options<GetHomeOverviewData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetHomeOverviewResponses, GetHomeOverviewErrors, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'SESSION',
                type: 'apiKey'
            }
        ],
        url: '/api/home/overview',
        ...options
    });
};

/**
 * 打刻
 * 出勤/退勤の打刻を記録
 */
export const stamp = <ThrowOnError extends boolean = false>(options: Options<StampData, ThrowOnError>) => {
    return (options.client ?? client).post<StampResponses, StampErrors, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'SESSION',
                type: 'apiKey'
            }
        ],
        url: '/api/home/stamps',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 打刻履歴取得
 * 年・月の指定がなければ当月を返却
 */
export const getStampHistory = <ThrowOnError extends boolean = false>(options?: Options<GetStampHistoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetStampHistoryResponses, GetStampHistoryErrors, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'SESSION',
                type: 'apiKey'
            }
        ],
        url: '/api/stamp-history',
        ...options
    });
};

/**
 * 打刻履歴削除
 * 指定した打刻IDを削除
 */
export const deleteStamp = <ThrowOnError extends boolean = false>(options: Options<DeleteStampData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteStampResponses, DeleteStampErrors, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'SESSION',
                type: 'apiKey'
            }
        ],
        url: '/api/stamps/{id}',
        ...options
    });
};

/**
 * 打刻履歴更新
 * 指定した打刻IDの出勤/退勤時刻を更新
 */
export const updateStamp = <ThrowOnError extends boolean = false>(options: Options<UpdateStampData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateStampResponses, UpdateStampErrors, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'SESSION',
                type: 'apiKey'
            }
        ],
        url: '/api/stamps/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * お知らせ一覧取得
 * すべてのお知らせを日付降順で取得（管理者向け）
 */
export const getAllNews = <ThrowOnError extends boolean = false>(options?: Options<GetAllNewsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllNewsResponses, GetAllNewsErrors, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'SESSION',
                type: 'apiKey'
            }
        ],
        url: '/api/news',
        ...options
    });
};

/**
 * お知らせ作成
 * 新規お知らせを作成（ADMIN権限が必要）
 */
export const createNews = <ThrowOnError extends boolean = false>(options: Options<CreateNewsData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateNewsResponses, CreateNewsErrors, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'SESSION',
                type: 'apiKey'
            }
        ],
        url: '/api/news',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 公開お知らせ一覧取得
 * 公開フラグがtrueのお知らせを日付降順で取得（認証不要）
 */
export const getPublishedNews = <ThrowOnError extends boolean = false>(options?: Options<GetPublishedNewsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPublishedNewsResponses, unknown, ThrowOnError>({
        url: '/api/news/published',
        ...options
    });
};

/**
 * お知らせ削除
 * 指定IDのお知らせを削除（ADMIN権限が必要）
 */
export const deleteNews = <ThrowOnError extends boolean = false>(options: Options<DeleteNewsData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteNewsResponses, DeleteNewsErrors, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'SESSION',
                type: 'apiKey'
            }
        ],
        url: '/api/news/{id}',
        ...options
    });
};

/**
 * お知らせ更新
 * 既存お知らせを更新（ADMIN権限が必要）
 */
export const updateNews = <ThrowOnError extends boolean = false>(options: Options<UpdateNewsData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateNewsResponses, UpdateNewsErrors, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'SESSION',
                type: 'apiKey'
            }
        ],
        url: '/api/news/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * お知らせ公開状態設定
 * 公開/非公開フラグを明示的に設定（ADMIN権限が必要）
 */
export const toggleNewsPublish = <ThrowOnError extends boolean = false>(options: Options<ToggleNewsPublishData, ThrowOnError>) => {
    return (options.client ?? client).patch<ToggleNewsPublishResponses, ToggleNewsPublishErrors, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'SESSION',
                type: 'apiKey'
            }
        ],
        url: '/api/news/{id}/publish',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};
